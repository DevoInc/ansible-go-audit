# Configure socket buffers, leave unset to use the system defaults
# Values will be doubled by the kernel
# It is recommended you do not set any of these values unless you really need to
socket_buffer:
  # Default is net.core.rmem_default (/proc/sys/net/core/rmem_default)
  # Maximum max is net.core.rmem_max (/proc/sys/net/core/rmem_max)
  receive: 16384

events:
  # Minimum event type to capture, default 1300
  min: {{ goaudit_event_type_min }}
  # Maximum event type to capture, default 1399
  max: {{ goaudit_event_type_max }}

# Configure message sequence tracking
message_tracking:
  # Track messages and identify if we missed any, default true
  enabled: {{ goaudit_message_tracking }}

  # Log out of orderness, these messages typically signify an overloading system, default false
  log_out_of_order: {{ goaudit_log_out_order }}

  # Maximum out of orderness before a missed sequence is presumed dropped, default 500
  max_out_of_order: {{ goaudit_max_out_order }}

# Configure where to output audit events
# Only 1 output can be active at a given time
output:
  # Writes to stdout
  # All program status logging will be moved to stderr
  stdout:
    enabled: {{ goaudit_output_stdout_enabled }}

    # Total number of attempts to write a line before considering giving up
    # If a write fails go-audit will sleep for 1 second before retrying
    # Default is 3
    attempts: {{ goaudit_output_stdout_attemps }}

  # Writes logs to syslog
  syslog:
    enabled: {{ goaudit_output_syslog_enabled }}
    attempts: {{ goaudit_output_syslog_attemps }}

    # Configure the type of socket this should be, default is unixgram
    # This maps to `network` in golangs net.Dial: https://golang.org/pkg/net/#Dial
    network: {{ goaudit_output_syslog_network }}

    # Set the remote address to connect to, this can be a path or an ip address
    # This maps to `address` in golangs net.Dial: https://golang.org/pkg/net/#Dial
    address: {{ goaudit_output_syslog_address }}

    # Sets the facility and severity for all events. See the table below for help
    # The default is 132 which maps to local0 | warn
    priority: {{ goaudit_output_syslog_priority }} # local0 | emerg

    # Typically the name of the program generating the message. The PID is of the process is appended for you: [1233]
    # Default value is "go-audit"
    tag: {{ goaudit_output_syslog_tag }}

  # Appends logs to a file
  file:
    enabled: {{ goaudit_output_file_enabled }}
    attempts: {{ goaudit_output_file_attemps }}

    # Path of the file to write lines to
    # The actual file will be created if it is missing but make sure the parent directory exists
    path: {{ goaudit_output_file_path }}

    # Octal file mode for the log file, make sure to always have a leading 0
    mode: {{ goaudit_output_file_mode }}

    # User and group that should own the log file
    user: {{ goaudit_output_file_user }}
    group: {{ goaudit_output_file_group }}

  # Writes logs to Graylog2 server using GELF standard: http://docs.graylog.org/en/stable/pages/gelf.html
  gelf:
    enabled: {{ goaudit_output_gelf_enabled }}
    attempts: {{ goaudit_output_gelf_ttemps }}

    # Configure the type of socket this should be, this can only be "udp" or "tcp".
    # Default value is "udp".
    network: {{ goaudit_output_gelf_network }}

    # Set the remote address to connect to, this can be an IP address or a hostname and port.
    # This setting is mandatory and has no default value.
    address: {{ goaudit_output_gelf_address }}

    # Defines the compression settings when using GELF over UDP network
    compression:
      # Sets the level of compression
      # This maps to `compress/flate` consts: https://godoc.org/compress/flate#pkg-constants
      # Default value is: 1, which means "BestSpeed"
      level: {{ goaudit_output_gelf_compression }}

      # Configure the compression type the writer should use when sending messages to server
      # This maps to `CompressionType` into gelf library: https://godoc.org/gopkg.in/Graylog2/go-gelf.v2/gelf#CompressType
      # Default values is: 0, which means "Gzip"
      type: {{ goaudit_output_gelf_type }}

# Configure logging, only stdout and stderr are used.
log:
  # Gives you a bit of control over log line prefixes. Default is 0 - nothing.
  # To get the `filename:lineno` you would set this to 16
  #
  # Ldate         = 1  // the date in the local time zone: 2009/01/23
  # Ltime         = 2  // the time in the local time zone: 01:23:23
  # Lmicroseconds = 4  // microsecond resolution: 01:23:23.123123.  assumes Ltime.
  # Llongfile     = 8  // full file name and line number: /a/b/c/d.go:23
  # Lshortfile    = 16 // final file name element and line number: d.go:23. overrides Llongfile
  # LUTC          = 32 // if Ldate or Ltime is set, use UTC rather than the local time zone
  #
  # See also: https://golang.org/pkg/log/#pkg-constants
  flags: {{ goaudit_log_flags }}

rules:
{% for rule in goaudit_rules %}
  - {{ rule }}
{% endfor %}
  - -e {{ goaudit_rules_lock }}

# If kaudit filtering isn't powerful enough you can use the following filter mechanism
filters:
{% for filter in goaudit_filters %}
  - syscall: {{ filter.syscall }} 
    message_type: {{ filter.message_type }}
    regex: {{ filter.regex }}
{% endfor %}
